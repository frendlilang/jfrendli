
----------
START RULE
----------

file:
	statement* EOF ;


---------------
STATEMENT RULES
---------------

statement:
	changeStmt
	| declarationStmt
	| expressionStmt
	| ifStmt
	| repeatTimesStmt
	| repeatWhileStmt
	| returnStmt
	| returnWithStmt ;

declarationStmt:
	classDecl
	| functionDecl
	| variableDecl ;

classDecl:
	"describe" IDENTIFIER ( "inherit" IDENTIFIER )? classBlock ;

functionDecl:
	"define" function ;

variableDecl:
	"create" IDENTIFIER "=" expression NEWLINE ;

changeStmt:
	"change" ( call "." )? IDENTIFIER "=" expression NEWLINE ;

displayStmt:
	"display" expression NEWLINE ; (TEMPORARY)

expressionStmt:
	expression NEWLINE ;

ifStmt:
	"if" expression block ( "otherwise" block )? ;

repeatTimesStmt:
	"repeat" expression "times" block ;

repeatWhileStmt:
	"repeat" "while" expression block ;

returnStmt:
	"return" NEWLINE ;

returnWithStmt:
	"return" "with" expression NEWLINE ;

block:
	NEWLINE INDENT statement+ DEDENT ;

classBlock:
	NEWLINE INDENT classFieldDecl* functionDecl+ DEDENT ;

classFieldDecl:
	"has" IDENTIFIER ( "=" expression )? NEWLINE ;


------------
HELPER RULES
------------

function:
	IDENTIFIER "(" parameters? ")" block ;

parameters:
	"accept" IDENTIFIER ( "," IDENTIFIER )* ;

arguments:
	"send" expression ( "," expression )* ;


----------------
EXPRESSION RULES
----------------

expression:
	logicOr ;

logicOr:
	logicAnd ( "or" logicAnd )* ;

logicAnd:
	comparison ( "and" comparison )* ;

comparison:
	term ( ( "<" | "<=" | ">" | ">=" | "equals" | "unequals" ) term )* ;

term:
	factor ( ( "+" | "-" ) factor )* ;

factor:
	unary ( ( "*" | "/" ) unary )* ;

unary:
	( "not" | "-" ) unary | call ;

call:
	primary ( "(" arguments? ")" | "." IDENTIFIER )* ;

primary:
	IDENTIFIER
	| NUMBER
	| TEXT
	| "true"
	| "false"
	| "empty"
	| "me"
	| "parent" "." IDENTIFIER
	| "(" expression ")" ;


-------------
LEXICAL RULES
-------------

IDENTIFIER:
	ALPHA ( ALPHA | DIGIT )* ;

NUMBER:
	DIGIT+ ( "." DIGIT+ )? ;

TEXT:
	"\"" <any ASCII character except "\" or newline>* "\"" ;

ALPHA:
	"a" ... "z"
	| "A" ... "Z"
	| "_" ;

DIGIT:
	"0" ... "9" ;
