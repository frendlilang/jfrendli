
-------------------
GRAMMAR TERMINOLOGY
-------------------

terminal                A literal to be matched and consumed
nonterminal             A call to the function rule


----------------
GRAMMAR NOTATION
----------------

<rule name>:<rule>      Rule structure
<double quoted string>  Exact terminal
<uppercase word>        Varying terminal
<lowercase word>        Nonterminal

:                       Start of rule (definer)
;                       End of rule (terminator)
x*                      Match zero or more of x
x+                      Match one or more of x
x?                      Match zero or one of x
x1 x2                   Match x1 then x2
x1 | x2                 Match x1 or x2
( x )                   Match x (everything inside the parentheses)
\c                      Escape the grammatical meaning of character c
v1 ... v2               Any value in the range from v1 to v2 inclusive
"                       Start or end (enclosing) of exact terminal
'                       Start or end (enclosing) of escape sequence
<                       Start of comment describing the rule
>                       End of comment describing the rule


----------
START RULE
----------

file:
	statement* EOF ;


---------------
STATEMENT RULES
---------------

statement:
	classDeclaration
	| classFieldDeclaration
	| functionDeclaration
	| variableDeclaration
	| changeStatement
	| expressionStatement
	| ifStatement
	| repeatTimesStatement
	| repeatWhileStatement
	| returnStatement
	| returnWithStatement ;

classDeclaration:
	"describe" IDENTIFIER ( "inherit" IDENTIFIER )? classBlock ;

classFieldDeclaration:
	"has" IDENTIFIER ( "=" expression )? NEWLINE ;

functionDeclaration:
	"define" IDENTIFIER "(" parameters? ")" block ;

variableDeclaration:
	"create" IDENTIFIER "=" expression NEWLINE ;

changeStatement:
	"change" ( call "." )? IDENTIFIER "=" expression NEWLINE ;

expressionStatement:
	expression NEWLINE ;

ifStatement:
	"if" expression block ( "otherwise" "if" expression block )* ( "otherwise" block )?

repeatTimesStatement:
	"repeat" expression "times" block ;

repeatWhileStatement:
	"repeat" "while" expression block ;

returnStatement:
	"return" NEWLINE ;

returnWithStatement:
	"return" "with" expression NEWLINE ;

block:
	NEWLINE INDENT statement+ DEDENT ;

classBlock:
	NEWLINE INDENT classFieldDeclaration* functionDeclaration+ DEDENT ;


------------
HELPER RULES
------------

parameters:
	"accept" IDENTIFIER ( "," IDENTIFIER )* ;

arguments:
	"send" expression ( "," expression )* ;


----------------
EXPRESSION RULES
----------------

expression:
	logicOr ;

logicOr:
	logicAnd ( "or" logicAnd )* ;

logicAnd:
	comparison ( "and" comparison )* ;

comparison:
	term ( ( "<" | "<=" | ">" | ">=" | "equals" | "unequals" ) term )* ;

term:
	factor ( ( "+" | "-" ) factor )* ;

factor:
	unary ( ( "*" | "/" ) unary )* ;

unary:
	( "not" | "-" ) unary | call ;

call:
	primary ( "(" arguments? ")" | "." IDENTIFIER )* ;

primary:
	IDENTIFIER
	| NUMBER
	| TEXT
	| "true"
	| "false"
	| "empty"
	| "me"
	| "parent" "." IDENTIFIER
	| "(" expression ")" ;


-------------
LEXICAL RULES
-------------

IDENTIFIER:
	ALPHA ( ALPHA | DIGIT )* ;

NUMBER:
	DIGIT+ ( "." DIGIT+ )? ;

TEXT:
	"\"" <any ASCII character except "\"" or NEWLINE>* "\"" ;

ALPHA:
	"a" ... "z"
	| "A" ... "Z"
	| "_" ;

DIGIT:
	"0" ... "9" ;

NEWLINE:
    '\n'
    | '\r'
    | '\r\n' ;

INDENT:
    ( " " | '\t' )+ ;

DEDENT:
    <a decrease in INDENT> ;

EOF:
    <end of file> ;
